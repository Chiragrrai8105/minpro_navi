from ultralytics import YOLO
import numpy as np
import cv2
from google.colab import files
from matplotlib import pyplot as plt

# Load YOLO model
model = YOLO("/content/drive/MyDrive/Bacteria_Trained_Models/best_fp_conf0.38.pt")

def bacterial_analysis(img_path, conf=0.4, iou=0.45, class_names=None):
    res = model.predict(img_path, conf=conf, iou=iou, imgsz=640)[0]

    boxes = res.boxes.xyxy.cpu().numpy() if hasattr(res.boxes, "xyxy") else np.array([])
    classes = res.boxes.cls.cpu().numpy().astype(int) if hasattr(res.boxes, "cls") else np.array([])

    # Load image
    img = cv2.imread(img_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img_h, img_w = img.shape[:2]
    image_area = img_h * img_w

    # Initialize counts and areas
    total = len(classes)
    counts = {}
    areas = {}
    total_detected_area = 0

    for i, c in enumerate(classes):
        x1, y1, x2, y2 = map(int, boxes[i])
        area = max(0, x2 - x1) * max(0, y2 - y1)
        total_detected_area += area

        counts[c] = counts.get(c,0) + 1
        areas[c] = areas.get(c,0) + area

        # Draw bounding box and label
        box_area_pct = 100 * (area / total_detected_area) if total_detected_area>0 else 0
        color = (0,255,0)
        cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
        label = f"{class_names[c]}: {box_area_pct:.1f}%"
        cv2.putText(img, label, (x1, y1-5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

    # Class-wise percentages (include all classes)
    counts_pct = { name: 100 * counts.get(i,0)/total if total>0 else 0 for i, name in enumerate(class_names) }
    areas_pct  = { name: 100 * areas.get(i,0)/total_detected_area if total_detected_area>0 else 0 for i, name in enumerate(class_names) }

    # Overall detection percentage
    overall_detection_percent = 100 * total_detected_area / image_area if image_area>0 else 0

    result = {
        "counts_pct": counts_pct,
        "areas_pct": areas_pct,
        "overall_detection_percent": overall_detection_percent,
        "total_detections": total
    }

    return result, img

# Upload image
uploaded = files.upload()
img_path = list(uploaded.keys())[0]

# Define bacteria classes
names = ['Staphylococcus','E_coli']

# Run detection and analysis
result, img_with_boxes = bacterial_analysis(img_path, conf=0.45, class_names=names)

# Print outputs
print("\nðŸ“Š Detection-based Bacterial Percentages per Class:")
print("By Count:", result["counts_pct"])
print("By Area :", result["areas_pct"])
print(f"\nðŸŒŸ Overall Bacteria Detection: {result['overall_detection_percent']:.2f}% of image")
print("Total Detections:", result["total_detections"])

# Display image with bounding boxes
plt.figure(figsize=(10,10))
plt.imshow(img_with_boxes)
plt.axis('off')
plt.show()
